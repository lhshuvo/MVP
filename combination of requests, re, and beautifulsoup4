from flask import Flask, render_template, request, redirect, url_for, flash, send_from_directory
import pandas as pd
import requests
import requests.exceptions
from werkzeug.utils import secure_filename
import os
import random
from fake_useragent import UserAgent
from tqdm import tqdm
from bs4 import BeautifulSoup
import re
import openpyxl

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = './'

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ['xlsx', 'xls']

def extract_emails_from_html(html):
    soup = BeautifulSoup(html, 'html.parser')
    emails = set()
    for link in soup.find_all('a'):
        if link.has_attr('href'):
            href = link['href']
            if href.startswith('mailto:'):
                email = href[7:]
                if re.match(r"[^@]+@[^@]+\.[^@]+", email):
                    emails.add(email)
    return emails

@app.route('/', methods = ['GET', 'POST'])
def myform():
    if request.method == 'POST':
        if 'x' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['x']
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            df = pd.read_excel(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            ua = UserAgent()

            mail_validation = []
            responsess = []
            for i in tqdm(range(len(df))):
                email = df['DirectEmail'][i]
                link = df['Source'][i]
                headers = {'User-Agent': ua.random}
                try:
                    response = requests.get(link, headers=headers, timeout=10)
                    responsess.append(response)
                    if response.status_code == 200:
                        emails = extract_emails_from_html(response.content)
                        if email in emails:
                            mail_validation.append(1)
                        else:
                            mail_validation.append(0)
                    else:
                        mail_validation.append(-1)
                except requests.exceptions.RequestException:
                    print(f"Request to {link} failed. Skipping...")
                    responsess.append("Request Error")
                    mail_validation.append(-1)

            df["valid_email"] = mail_validation
            df["Response_Type"] = responsess
            filename1 = 'Outputfile.xlsx'
            df.to_excel(filename1, index=False)
            return render_template('output.html')
    return render_template('index.html')

@app.route('/download')
def download_file():
    return send_from_directory(app.config['UPLOAD_FOLDER'], 'Outputfile.xlsx', as_attachment=True)

if __name__ == '__main__':
    app.run(port=1234, debug=True)
