from flask import Flask, render_template, request
import pandas as pd
import requests
import re
from random import choice, randint
from time import sleep
from concurrent.futures import ThreadPoolExecutor

app = Flask(__name__)

def check_email_phone_on_link(email, phone, source_link, headers):
    # make a request to the source link
    try:
        page = requests.get(source_link, headers=headers, timeout=5)
        page.raise_for_status()
        print(page.status_code)
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return 'no'
    # check if the email and phone are found on the page using regular expressions
    if not re.search(email, page.text) or not re.search(phone, page.text):
        return 'no'
    else:
        return 'yes'

@app.route('/', methods=['GET', 'POST'])
def check_email_phone():
    if request.method == 'POST':
        file = request.files['file']
        # read excel file
        try:
            df = pd.read_excel(file)
        except Exception as e:
            return render_template('index.html', message='Invalid file format')

        user_agents = [
            'Mozilla/5.0 (Windows NT 10.0;Win64) AppleWebkit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
            'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0',
            'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko',
            'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
            'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
        ]

        # add new column to store the result
        df['found'] = 'yes'
        # create thread pool
        with ThreadPoolExecutor() as executor:
            # iterate through each row of the dataframe
            for index, row in df.iterrows:
                email = row['email']
                phone = row['phone']
                source_link = row['source']
                headers = {'User-Agent': choice(user_agents)}
                # submit the task to thread pool
                future = executor.submit(check_email_phone_on_link, email, phone, source_link, headers)
                # get the result and update the dataframe
                df.loc[index, 'found'] = future.result()
                # Sleep for a random amount of time to avoid detection as a bot
                sleep(randint(1,5))
        # save the updated dataframe to the excel file
        df.to_excel(file)
        return render_template('index.html', message='File processed successfully')
    else:
        return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
