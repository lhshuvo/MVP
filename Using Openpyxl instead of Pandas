from openpyxl import load_workbook
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font
from openpyxl.utils.cell import coordinate_from_string
from flask import Flask, render_template, request, redirect, url_for, flash, send_from_directory
import requests
import requests.exceptions
from werkzeug.utils import secure_filename
import os
import random
from fake_useragent import UserAgent
from tqdm import tqdm

app = Flask("Test101")
app.config['UPLOAD_FOLDER'] = './'

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ['xlsx', 'xls']

@app.route('/', methods=['GET', 'POST'])
def myform():
    if request.method == 'POST':
        if 'x' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['x']
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            wb = load_workbook(filename=os.path.join(app.config['UPLOAD_FOLDER'], filename))
            ws = wb.active
            responsess = []
            mail_validation = []
            ua = UserAgent()
            headers = {'User-Agent': ua.random}
            for i in tqdm(range(2, ws.max_row + 1)):
                email = ws.cell(row=i, column=ws["DIrectEmail"].column).value
                link = ws.cell(row=i, column=ws["Source"].column).value
                try:
                    response = requests.get(link, headers=headers)
                    responsess.append(response)
                    if email in response.text:
                        mail_validation.append(1)
                    else:
                        mail_validation.append(0)
                except requests.exceptions.RequestException:
                    print(f"Request to {link} failed. Skipping...")
                    responsess.append("Request Error")
                    mail_validation.append(-1)

            # add new columns to worksheet
            ws.insert_cols(ws["Source"].column + 1)
            ws.insert_cols(ws["Source"].column + 1)
            ws.cell(row=1, column=ws["Source"].column + 1, value='valid_email')
            ws.cell(row=1, column=ws["Source"].column + 2, value='Response_Type')
            for i, validation in enumerate(mail_validation):
                row = i + 2
                ws.cell(row=row, column=ws["Source"].column + 1, value=validation)
                if responsess[i] != "Request Error":
                    ws.cell(row=row, column=ws["Source"].column + 2, value=responsess[i].text)

            # save the file
            wb.save(filename='Outputfile.xlsx')
            return render_template('output.html')
    return render_template('index.html')

@app.route('/download')
def download_file():
    return send_from_directory(app.config['UPLOAD_FOLDER'], 'Outputfile.xlsx', as_attachment=True)

app.run(port=1234, debug=True)
